version: "3.9"
services:
  rabbitmq:
    image: rabbitmq:3-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQUSERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQPASSWORD}
    networks:
      - backend
    expose:
      - 5672
    restart: unless-stopped
  publisher:
    build:
      context: ./backend/publisher
      dockerfile: Dockerfile
    image: publisher:1
    container_name: publisher
    environment:
      - RABBITMQUSERNAME=${RABBITMQUSERNAME}
      - RABBITMQPASSWORD=${RABBITMQPASSWORD}
      - SERVICEID=${SERVICEID}
    networks:
      - backend
    depends_on:
      - rabbitmq
    restart: unless-stopped
  consumer:
    build:
      context: ./backend
      dockerfile: $PWD/backend/consumer/Dockerfile
    image: consumer:1
    container_name: consumer
    environment:
      - PUBLICVAPIDKEY=${PUBLICVAPIDKEY}
      - PRIVATEVAPIDKEY=${PRIVATEVAPIDKEY}
      - CONTACTEMAIL=${CONTACTEMAIL}
      - RABBITMQUSERNAME=${RABBITMQUSERNAME}
      - RABBITMQPASSWORD=${RABBITMQPASSWORD}
      - DBUSERNAME=${DBUSERNAME}
      - DBPASSWORD=${DBPASSWORD}
    networks:
      - backend
    depends_on:
      - rabbitmq
      - db
    restart: unless-stopped
  PS2AlertMe:
    build:
      context: .
      dockerfile: Dockerfile
    image: ps2alertme:1
    container_name: PS2AlertMe
    environment:
      - DBUSERNAME=${DBUSERNAME}
      - DBPASSWORD=${DBPASSWORD}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - NODE_ENV=production
    networks:
      - backend
    expose:
      - 8080
    depends_on:
      - db
    restart: unless-stopped
  caddy:
    image: caddy:2.4.3-alpine
    container_name: caddy
    environment:
      - SITE_ADDRESS=${SITE_ADDRESS}
      - EMAIL=${EMAIL}
    networks:
      - frontend
      - backend
    ports:
      - 80:80
      - 443:443
    volumes:
      - caddy-data:/data
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - db
      - rabbitmq
      - publisher
      - consumer
      - PS2AlertMe
    restart: always

networks:
  backend:
  frontend:

volumes:
  db-data:
  caddy-data:
